#pragma checksum "C:\Users\stuar\OneDrive\Desktop\Hackathon\covid-19\WebCovid\WebCovid\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3eff6e0ea74fbda33e9b434b001649816d08acf4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WebCovid.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace WebCovid.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\stuar\OneDrive\Desktop\Hackathon\covid-19\WebCovid\WebCovid\Pages\_ViewImports.cshtml"
using WebCovid;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3eff6e0ea74fbda33e9b434b001649816d08acf4", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eaceda12a204a37352c6a4fa32797f11151815f6", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\stuar\OneDrive\Desktop\Hackathon\covid-19\WebCovid\WebCovid\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<script src=\"https://code.jquery.com/jquery-3.5.1.js\" integrity=\"sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=\" crossorigin=\"anonymous\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3eff6e0ea74fbda33e9b434b001649816d08acf43262", async() => {
                WriteLiteral("\r\n    <title>Bootstrap 101 Template</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <!-- Bootstrap -->\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Covid Data</h1>
    <p>Pick a state below</p>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js""></script>
    <script src=""https://code.jquery.com/jquery.js""></script>
    <script src=""js/bootstrap.min.js""></script>
    <div class="" dropdown"" style=""margin-bottom: 6cm;"" id=""stateSelect"">
        <button class=""btn btn-secondary dropdown-toggle"" type=""button"" id=""dropdownMenuButton"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
            <span id=""selected"">Choose State</span><span class=""caret""></span>
        </button>
        <div class=""dropdown-menu pre-scrollable"" aria-labelledby=""dropdownMenuButton"">
            <a class=""dropdown-item"" href=""#"">Choose State</a>
            <a class=""dropdown-item"" href=""#"">Alabama</a>
            <a class=""dropdown-item"" href=""#"">Alaska</a>
            <a class=""dropdown-item"" href=""#"">Arizona</a>
            <a class=""dropdown-item"" href=""#"">A");
            WriteLiteral(@"rkansas</a>
            <a class=""dropdown-item"" href=""#"">California</a>
            <a class=""dropdown-item"" href=""#"">Colorado</a>
            <a class=""dropdown-item"" href=""#"">Connecticut</a>
            <a class=""dropdown-item"" href=""#"">Delaware</a>
            <a class=""dropdown-item"" href=""#"">Florida</a>
            <a class=""dropdown-item"" href=""#"">Georgia</a>
            <a class=""dropdown-item"" href=""#"">Hawaii</a>
            <a class=""dropdown-item"" href=""#"">Idaho</a>
            <a class=""dropdown-item"" href=""#"">Illinois</a>
            <a class=""dropdown-item"" href=""#"">Indiana</a>
            <a class=""dropdown-item"" href=""#"">Iowa</a>
            <a class=""dropdown-item"" href=""#"">Kansas</a>
            <a class=""dropdown-item"" href=""#"">Kentucky</a>
            <a class=""dropdown-item"" href=""#"">Louisiana</a>
            <a class=""dropdown-item"" href=""#"">Maine</a>
            <a class=""dropdown-item"" href=""#"">Maryland</a>
            <a class=""dropdown-item"" href=""#"">Massachusetts</a");
            WriteLiteral(@">
            <a class=""dropdown-item"" href=""#"">Michigan</a>
            <a class=""dropdown-item"" href=""#"">Minnesota</a>
            <a class=""dropdown-item"" href=""#"">Mississippi</a>
            <a class=""dropdown-item"" href=""#"">Missouri</a>
            <a class=""dropdown-item"" href=""#"">Montana</a>
            <a class=""dropdown-item"" href=""#"">Nebraska</a>
            <a class=""dropdown-item"" href=""#"">Nevada</a>
            <a class=""dropdown-item"" href=""#"">New Hampshire</a>
            <a class=""dropdown-item"" href=""#"">New Jersey</a>
            <a class=""dropdown-item"" href=""#"">New Mexico</a>
            <a class=""dropdown-item"" href=""#"">New York</a>
            <a class=""dropdown-item"" href=""#"">North Carolina</a>
            <a class=""dropdown-item"" href=""#"">North Dakota</a>
            <a class=""dropdown-item"" href=""#"">Ohio</a>
            <a class=""dropdown-item"" href=""#"">Oklahoma</a>
            <a class=""dropdown-item"" href=""#"">Oregon</a>
            <a class=""dropdown-item"" href=""#"">P");
            WriteLiteral(@"ennsylvania</a>
            <a class=""dropdown-item"" href=""#"">Rhode Island</a>
            <a class=""dropdown-item"" href=""#"">South Carolina</a>
            <a class=""dropdown-item"" href=""#"">South Dakota</a>
            <a class=""dropdown-item"" href=""#"">Tennessee</a>
            <a class=""dropdown-item"" href=""#"">Texas</a>
            <a class=""dropdown-item"" href=""#"">Utah</a>
            <a class=""dropdown-item"" href=""#"">Vermont</a>
            <a class=""dropdown-item"" href=""#"">Virginia</a>
            <a class=""dropdown-item"" href=""#"">Washington</a>
            <a class=""dropdown-item"" href=""#"">West Virginia</a>
            <a class=""dropdown-item"" href=""#"">Wisconsin</a>
            <a class=""dropdown-item"" href=""#"">Wyoming</a>
        </div>
    </div>
    <button class=""btn"" type=""button"" id=""dataButton""></button>
    <div class=""hide row"" id=""coviddata"" hidden>
        <div class="" col-3"">
            <span id=""stateName"">State Data</span><span class=""caret""></span>
            <canvas i");
            WriteLiteral(@"d=""Chart1"" width=""200"" height=""200""></canvas>
        </div>
        <div class="" col-1"">

        </div>
        <div class="" col-3"">
            <canvas id=""Chart2"" width=""200"" height=""200""></canvas>
        </div>
        <div class="" col-1"">

        </div>
        <div class="" col-3"">
            <canvas id=""Chart3"" width=""200"" height=""200""></canvas>
        </div>
    </div>
        <div class=""row"">
            <div class=""col-2 box"">
                Covid facts
            </div>
            <div class=""col-3"">

            </div>
            <div class=""col-2 box"">
                Covid facts
            </div>
            <div class=""col-3"">

            </div>
            <div class=""col-2 box"">
                Covid facts
            </div>
        </div>
        <div class=""col-8"">

        </div>

        <!-- The core Firebase JS SDK is always required and must be listed first -->
        <script src=""https://www.gstatic.com/firebasejs/8.2.5/firebase.js""></s");
            WriteLiteral(@"cript>
        <!-- TODO: Add SDKs for Firebase products that you want to use
             https://firebase.google.com/docs/web/setup#available-libraries -->
        <!-- <script src=""https://www.gstatic.com/firebasejs/8.2.5/firebase-analytics.js""></script> -->
        <script>
            // Your web app's Firebase configuration
            // For Firebase JS SDK v7.20.0 and later, measurementId is optional
            var firebaseConfig = {
                apiKey: ""AIzaSyALk44aihOM5EqeiQwfD_vhIF7YhXIVwMY"",
                authDomain: ""swamphackscovid19data.firebaseapp.com"",
                databaseURL: ""https://swamphackscovid19data-default-rtdb.firebaseio.com"",
                projectId: ""swamphackscovid19data"",
                storageBucket: ""swamphackscovid19data.appspot.com"",
                messagingSenderId: ""573451783241"",
                appId: ""1:573451783241:web:96c03f6350266800a98398"",
                measurementId: ""G-G0JKHK3W3V""
            };
            // Initialize Firebase");
            WriteLiteral(@"
            firebase.initializeApp(firebaseConfig);
            firebase.analytics();
        </script>
</div>
<script>
    var test = true;
    var stateAbr = [""AL"", ""AK"", ""AZ"", ""AR"", ""CA"", ""CO"", ""CT"", ""DE"", ""FL"",
        ""GA"", ""HI"", ""ID"", ""IL"", ""IN"", ""IA"", ""KS"", ""KY"", ""LA"", ""ME"", ""MD"",
        ""MA"", ""MI"", ""MN"", ""MS"", ""MO"", ""MT"", ""NE"", ""NV"", ""NH"", ""NJ"", ""NM"",
        ""NY"", ""NC"", ""ND"", ""OH"", ""OK"", ""OR"", ""PA"", ""RI"", ""SC"", ""SD"", ""TN"",
        ""TX"", ""UT"", ""VT"", ""VA"", ""WA"", ""WV"", ""WI"", ""WY""];

    var stateName = [""Alabama"", ""Alaska"", ""Arizona"", ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"", ""Delaware"", ""Florida"",
        ""Georgia"", ""Hawaii"", ""Idaho"", ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"", ""Louisiana"", ""Maine"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"", ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"", ""New Hampshire"", ""New Jersey"", ""New Mexico"",
        ""New York"", ""North Carolina"", ""North Dakota"", ""Ohio"", ""Oklahoma"", ""Oregon"", ""Pennsylvania"", ""Rh");
            WriteLiteral(@"ode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virginia"", ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming""];

    var states = {};
    
    for (var i = 0; i < 50; i++) {
        states[stateName[i]] = stateAbr[i];
    }
    
    $('.dropdown-menu a').click(function () {
        $('#selected').text($(this).text());
        if ($(this).text() == ""Choose State"" && document.getElementById('coviddata').getAttribute(""hidden"") == null) {
            document.getElementById('coviddata').setAttribute(""hidden"", true);
            document.getElementById('stateSelect').setAttribute(""style"", ""margin - bottom: 6cm;"");

        }
        else if ($(this).text() != ""Choose State"") {
            $('#stateName').text($(this).text() + "" State Data"");
            document.getElementById('stateSelect').removeAttribute(""style"");
            //Display Code below
            var state = states[$(this).text()]; //this should be interchangeable due to drop do");
            WriteLiteral(@"wn
            console.log(state);
            var city = ""Jacksonville"";
            var zip = ""32223"";
            var database = firebase.database();
            var hospData = database.ref(""hospital_data"");
            var stateData = database.ref(""state_data"");

            //cut off dates
            //date in hosp indicates the nearest friday -- so date cutoff
            // would be the most recent friday 
            var currentTime = new Date()
            currentTime.setDate(currentTime.getDate() - (currentTime.getDay() + 1) - 7);
            console.log(""the cutoff date: "" + currentTime);
            var cutoffDate = Date.parse(currentTime);

            //open snapshot         
            var dates = [];
            var deaths = [];
            var hospitalized = [];
            var posInc = [];
            
            stateData.orderByChild(""state"").equalTo(state).once('value', function (snapshot) {
                
                var data = snapshot.val();
          ");
            WriteLiteral(@"      for (let i in data) {
                    var d1 = Date.parse(data[i].date);
                    if (d1 >= cutoffDate) {
                        var dat = data[i].state;
                        dates.push(data[i].date);
                        deaths.push(data[i].death);
                        hospitalized.push(data[i].hospitalizedCurrently);
                        posInc.push(data[i].positiveIncrease);
                    }
                }
                document.getElementById('coviddata').removeAttribute(""hidden"");
                new Chart(document.getElementById(""Chart1""), {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            data: deaths,
                            label: ""Deaths"",
                            borderColor: ""#8e5ea2"",
                            fill: false
                        },
                        {
                            data: ");
            WriteLiteral(@"hospitalized,
                            label: ""Hospitalized"",
                            borderColor: ""#3cba9f"",
                            fill: false
                        }]
                    }
                });
                new Chart(document.getElementById(""Chart2""), {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            data: deaths,
                            label: ""Deaths"",
                            borderColor: ""#8e5ea2"",
                            fill: false
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: false
                                }
                            }]
                        }
                    }
                });
        ");
            WriteLiteral(@"        new Chart(document.getElementById(""Chart3""), {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            data: posInc,
                            label: ""Positive Increase"",
                            borderColor: ""#8e5ea2"",
                            fill: false
                        }]
                    }
                });
            });

            //this was my approach to formatting the state data
            //var state_date = [];
            //var state_deaths = [];
            //var state_pos_inc = [];
            //stateData.orderByChild(""state"").equalTo(state).once('value', function (snapshot) {
            //    var sD = snapshot.val();
            //    for (let i in sD) {
            //        var d1 = Date.parse(sD[i].date);
            //        if(d1 >= cutoffDate){
            //            state_date.push(data[i].date);
            //         ");
            WriteLiteral(@"   state_deaths.push(data[i].death)
            //            state_pos_inc.push(data[i].positiveIncrease)
            //        }
            //    }
            //});



            
            
            }
    });
</script>

<style>
    .dropdown-menu {
        max-height: 200px;
        overflow-y: auto;
    }

    .dropdown-space {
        margin-bottom: 6cm;
    }

    .box {
        width: auto;
        padding: 10px;
        border: 5px solid gray;
        margin: 0;
    }
</style>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
